// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// row_arma
arma::mat row_arma(const arma::mat& x, int cores);
RcppExport SEXP spatialtalk_row_arma(SEXP xSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    __result = Rcpp::wrap(row_arma(x, cores));
    return __result;
END_RCPP
}
// col_arma
arma::mat col_arma(const arma::mat& x, int cores);
RcppExport SEXP spatialtalk_col_arma(SEXP xSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    __result = Rcpp::wrap(col_arma(x, cores));
    return __result;
END_RCPP
}
// self_crossprod_arma
arma::mat self_crossprod_arma(const arma::mat& x);
RcppExport SEXP spatialtalk_self_crossprod_arma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    __result = Rcpp::wrap(self_crossprod_arma(x));
    return __result;
END_RCPP
}
// crossprod_arma
arma::mat crossprod_arma(const arma::mat& x, const arma::mat& y);
RcppExport SEXP spatialtalk_crossprod_arma(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    __result = Rcpp::wrap(crossprod_arma(x, y));
    return __result;
END_RCPP
}
// self_tcrossprod_arma
arma::mat self_tcrossprod_arma(const arma::mat& x);
RcppExport SEXP spatialtalk_self_tcrossprod_arma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    __result = Rcpp::wrap(self_tcrossprod_arma(x));
    return __result;
END_RCPP
}
// tcrossprod_arma
arma::mat tcrossprod_arma(const arma::mat& x, const arma::mat& y);
RcppExport SEXP spatialtalk_tcrossprod_arma(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    __result = Rcpp::wrap(tcrossprod_arma(x, y));
    return __result;
END_RCPP
}
// nll_eigen
double nll_eigen(double x, const Eigen::MatrixXd& d, const Eigen::VectorXd& z, double n);
RcppExport SEXP spatialtalk_nll_eigen(SEXP xSEXP, SEXP dSEXP, SEXP zSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    __result = Rcpp::wrap(nll_eigen(x, d, z, n));
    return __result;
END_RCPP
}
// nll_1taper
double nll_1taper(double x, double n, const Eigen::VectorXd& good_dists, const Eigen::VectorXd& taps, const Eigen::VectorXd& ia, const Eigen::VectorXd& ja, const Eigen::VectorXd& z, unsigned int rescol);
RcppExport SEXP spatialtalk_nll_1taper(SEXP xSEXP, SEXP nSEXP, SEXP good_distsSEXP, SEXP tapsSEXP, SEXP iaSEXP, SEXP jaSEXP, SEXP zSEXP, SEXP rescolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type good_dists(good_distsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type taps(tapsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ja(jaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rescol(rescolSEXP);
    __result = Rcpp::wrap(nll_1taper(x, n, good_dists, taps, ia, ja, z, rescol));
    return __result;
END_RCPP
}
// nll_2taper
double nll_2taper(double x, double n, const Eigen::VectorXd& good_dists, const Eigen::VectorXd& taps, const Eigen::VectorXd& ia, const Eigen::VectorXd& ja, const Eigen::VectorXd& z, unsigned int rescol);
RcppExport SEXP spatialtalk_nll_2taper(SEXP xSEXP, SEXP nSEXP, SEXP good_distsSEXP, SEXP tapsSEXP, SEXP iaSEXP, SEXP jaSEXP, SEXP zSEXP, SEXP rescolSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type good_dists(good_distsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type taps(tapsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ja(jaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rescol(rescolSEXP);
    __result = Rcpp::wrap(nll_2taper(x, n, good_dists, taps, ia, ja, z, rescol));
    return __result;
END_RCPP
}
// nll_1taper_parallel
Eigen::VectorXd nll_1taper_parallel(Eigen::VectorXd x, double n, const Eigen::VectorXd& good_dists, const Eigen::VectorXd& taps, const Eigen::VectorXd& ia, const Eigen::VectorXd& ja, const Eigen::VectorXd& z, unsigned int rescol, unsigned int cores);
RcppExport SEXP spatialtalk_nll_1taper_parallel(SEXP xSEXP, SEXP nSEXP, SEXP good_distsSEXP, SEXP tapsSEXP, SEXP iaSEXP, SEXP jaSEXP, SEXP zSEXP, SEXP rescolSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type good_dists(good_distsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type taps(tapsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ja(jaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rescol(rescolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cores(coresSEXP);
    __result = Rcpp::wrap(nll_1taper_parallel(x, n, good_dists, taps, ia, ja, z, rescol, cores));
    return __result;
END_RCPP
}
// nll_2taper_parallel
Eigen::VectorXd nll_2taper_parallel(Eigen::VectorXd x, double n, const Eigen::VectorXd& good_dists, const Eigen::VectorXd& taps, const Eigen::VectorXd& ia, const Eigen::VectorXd& ja, const Eigen::VectorXd& z, unsigned int rescol, unsigned int cores);
RcppExport SEXP spatialtalk_nll_2taper_parallel(SEXP xSEXP, SEXP nSEXP, SEXP good_distsSEXP, SEXP tapsSEXP, SEXP iaSEXP, SEXP jaSEXP, SEXP zSEXP, SEXP rescolSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type good_dists(good_distsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type taps(tapsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ia(iaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type ja(jaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rescol(rescolSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cores(coresSEXP);
    __result = Rcpp::wrap(nll_2taper_parallel(x, n, good_dists, taps, ia, ja, z, rescol, cores));
    return __result;
END_RCPP
}
// backsolve_arma
arma::mat backsolve_arma(arma::mat r, const arma::vec& x, unsigned int k, bool transpose);
RcppExport SEXP spatialtalk_backsolve_arma(SEXP rSEXP, SEXP xSEXP, SEXP kSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    __result = Rcpp::wrap(backsolve_arma(r, x, k, transpose));
    return __result;
END_RCPP
}
// forwardsolve_arma
arma::mat forwardsolve_arma(arma::mat l, const arma::vec& x, unsigned int k, bool transpose);
RcppExport SEXP spatialtalk_forwardsolve_arma(SEXP lSEXP, SEXP xSEXP, SEXP kSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type l(lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type transpose(transposeSEXP);
    __result = Rcpp::wrap(forwardsolve_arma(l, x, k, transpose));
    return __result;
END_RCPP
}
// ifelse_arma
arma::mat ifelse_arma(arma::mat a);
RcppExport SEXP spatialtalk_ifelse_arma(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    __result = Rcpp::wrap(ifelse_arma(a));
    return __result;
END_RCPP
}
// rdist_earth1
arma::mat rdist_earth1(arma::mat x1, bool miles, double R);
RcppExport SEXP spatialtalk_rdist_earth1(SEXP x1SEXP, SEXP milesSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< bool >::type miles(milesSEXP);
    Rcpp::traits::input_parameter< double >::type R(RSEXP);
    __result = Rcpp::wrap(rdist_earth1(x1, miles, R));
    return __result;
END_RCPP
}
// nll_arma_corr
arma::mat nll_arma_corr(double x, arma::mat d);
RcppExport SEXP spatialtalk_nll_arma_corr(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    __result = Rcpp::wrap(nll_arma_corr(x, d));
    return __result;
END_RCPP
}
// nll_arma_chol
arma::mat nll_arma_chol(arma::mat corr_matrix);
RcppExport SEXP spatialtalk_nll_arma_chol(SEXP corr_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type corr_matrix(corr_matrixSEXP);
    __result = Rcpp::wrap(nll_arma_chol(corr_matrix));
    return __result;
END_RCPP
}
// nll_arma_det
double nll_arma_det(arma::mat Q);
RcppExport SEXP spatialtalk_nll_arma_det(SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    __result = Rcpp::wrap(nll_arma_det(Q));
    return __result;
END_RCPP
}
// nll_arma_bs
arma::mat nll_arma_bs(arma::mat Q, arma::vec z);
RcppExport SEXP spatialtalk_nll_arma_bs(SEXP QSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    __result = Rcpp::wrap(nll_arma_bs(Q, z));
    return __result;
END_RCPP
}
// nll_arma_dist
double nll_arma_dist(arma::mat bs);
RcppExport SEXP spatialtalk_nll_arma_dist(SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type bs(bsSEXP);
    __result = Rcpp::wrap(nll_arma_dist(bs));
    return __result;
END_RCPP
}
// nll_arma_all
double nll_arma_all(double n, double distval, double logdet);
RcppExport SEXP spatialtalk_nll_arma_all(SEXP nSEXP, SEXP distvalSEXP, SEXP logdetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type distval(distvalSEXP);
    Rcpp::traits::input_parameter< double >::type logdet(logdetSEXP);
    __result = Rcpp::wrap(nll_arma_all(n, distval, logdet));
    return __result;
END_RCPP
}
// wendland2_1
arma::vec wendland2_1(arma::vec d, double taprange);
RcppExport SEXP spatialtalk_wendland2_1(SEXP dSEXP, SEXP taprangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type taprange(taprangeSEXP);
    __result = Rcpp::wrap(wendland2_1(d, taprange));
    return __result;
END_RCPP
}
// make_tapersetup_R
Rcpp::List make_tapersetup_R(arma::mat d, double taprange);
RcppExport SEXP spatialtalk_make_tapersetup_R(SEXP dSEXP, SEXP taprangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type taprange(taprangeSEXP);
    __result = Rcpp::wrap(make_tapersetup_R(d, taprange));
    return __result;
END_RCPP
}
// make_tapersetup_eigen
Rcpp::List make_tapersetup_eigen(arma::mat d, double taprange);
RcppExport SEXP spatialtalk_make_tapersetup_eigen(SEXP dSEXP, SEXP taprangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type taprange(taprangeSEXP);
    __result = Rcpp::wrap(make_tapersetup_eigen(d, taprange));
    return __result;
END_RCPP
}
// nll_arma
double nll_arma(double x, arma::mat d, arma::vec z, double n);
RcppExport SEXP spatialtalk_nll_arma(SEXP xSEXP, SEXP dSEXP, SEXP zSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    __result = Rcpp::wrap(nll_arma(x, d, z, n));
    return __result;
END_RCPP
}
// nll_parallel
arma::vec nll_parallel(arma::vec x, arma::mat d, arma::vec z, double n, int cores);
RcppExport SEXP spatialtalk_nll_parallel(SEXP xSEXP, SEXP dSEXP, SEXP zSEXP, SEXP nSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    __result = Rcpp::wrap(nll_parallel(x, d, z, n, cores));
    return __result;
END_RCPP
}
